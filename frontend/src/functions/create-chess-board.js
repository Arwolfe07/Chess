// defining a class Cell which will hold initial board positions and pieces
class Cell {
    constructor(pos, piece) {
        this.pos = pos;
        this.piece = piece;
    }
}

// returns an array of items between 1 to n
const range = (n) => {
    return Array.from({ length: n }, (_, i) => i + 1);
}

export const createBoard = (fenString) => {
    // first part of the FEN String
    const fen = fenString.split(' ')[0];

    // remove '/'
    const fenPieces = fen.split('/').join('')

    // change to array
    let pieces = Array.from(fenPieces);

    // save individual pieces for 64 cells
    // if we have a numeric value we replace the element at the pieces with array generated by range function
    Array.from(fenPieces).forEach((item, index) => {
        if (isFinite(item)) {
            pieces.splice(index, 1, range(item).fill(''));
        }
    })
    // [
    //     ["r", "n", "b", "q", "k", "b", "n", "r"],
    //     ["p", "p", "p", "p", "p", "p", "p", "p"],
    //     ["", "", "", "", "", "", "", ""],
    //     ["", "", "", "", "", "", "", ""],
    //     ["", "", "", "", "", "", "", ""],
    //     ["", "", "", "", "P", "", "", ""],
    //     ["P", "P", "P", "P", "", "P", "P", "P"],
    //     ["R", "N", "B", "Q", "K", "B", "N", "R"]
    //   ]

    pieces = pieces.flat();

    // define rows
    // ["8", "7", "6", "5", "4", "3", "2", "1"]
    const rows = range(8).map((n) => n.toString()).reverse();

    // define columns
    const columns = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];

    // define cells - ['a1', 'a2',......, 'h8']
    const cells = [];
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        for (let j = 0; j < columns.length; j++) {
            const col = columns[j];
            cells.push(col + row);
        }
    }

    // make board
    const board = [];
    for (let i = 0; i < pieces.length; i++) {
        const cell = cells[i];
        const piece = pieces[i];
        board.push(new Cell(cell, piece));
    }

    return board;
};